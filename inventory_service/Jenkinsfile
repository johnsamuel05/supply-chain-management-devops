pipeline {
    agent any
    
    environment {
        DOCKERFILE_PATH = "inventory_service/Dockerfile"
        IMAGE_NAME = "attemptmaster/devops:${env.BUILD_NUMBER}"
        LATEST_IMAGE = "attemptmaster/devops:latest"
        DOCKER_REGISTRY = "index.docker.io"
        CREDENTIALS_ID = "attemptmaster"
        PYTHON_BIN = "${HOME}/.local/bin" // Added environment variable for Python binaries
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}", "-f ${DOCKERFILE_PATH} inventory_service")
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    sh '''
                    # Add the Python binary directory to the PATH
                    export PATH=$PATH:${PYTHON_BIN}

                    # Navigate to the service directory
                    cd inventory_service

                    # Install dependencies
                    pip install --user -r requirements.txt

                    # Run unit tests
                    python -m unittest discover -s tests
                    '''
                }
            }
        }

        stage('Push to Docker Registry') {
            steps {
                withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        // Login to Docker Hub
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin'

                        // Tag the image with the build number and latest tag
                        sh "docker tag ${IMAGE_NAME} ${LATEST_IMAGE}"

                        // Push the image with the build number tag
                        sh "docker push ${IMAGE_NAME}"

                        // Push the image with the latest tag
                        sh "docker push ${LATEST_IMAGE}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
